import ast
import random
import asyncio
import aiohttp
import contextlib
import socks

from io import BytesIO
from typing import List, Optional

from channels.db import database_sync_to_async

from telethon import TelegramClient, errors
from telethon.tl.functions.messages import GetHistoryRequest
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.tl.patched import Message
from telethon.tl.types import PeerChannel, PeerUser

from app.models import TelegramChannel, TelegramUser

api_id = 14429679
api_hash = '5a91e2bfd9b57d681a2095b13af3072f'


def split_list(lst: list, n: int) -> list:
    """
    –†–∞–∑–¥–µ–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ `lst` –Ω–∞ `n` –ø–æ–¥—Å–ø–∏—Å–∫–æ–≤.
    –ï—Å–ª–∏ `lst` –Ω–µ–ª—å–∑—è —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ —Ä–æ–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Å–ø–∏—Å–∫–æ–≤, –æ—Å—Ç–∞—Ç–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ–¥—Å–ø–∏—Å–∫–µ.
    """
    split_size = len(lst) // n
    remainder = len(lst) % n

    result = []
    start = 0
    for i in range(n):
        end = start + split_size
        if i < remainder:
            end += 1

        result.append(lst[start:end])
        start = end

    return result


async def start_parsing(channel_ids: List[int], post_count: int) -> None:
    print("start parse")
    channel_ids = await get_telegram_channels_by_ids(channel_ids=channel_ids)

    client = TelegramClient('79851659771', api_id, api_hash)
    await client.start()

    await parse_for_channels(client, channel_ids, post_count)


async def start_mailing(user_ids: List[int], text: str, file: Optional[bytes] = None) -> None:
    print("start mailing")
    user_names = await get_telegram_users_by_ids(user_ids=user_ids)

    user_names_lists = split_list(user_names, 3)
    coroutines = [
        start_session_mailing(session[0], session[1], text, file) 
        for session in [('telethon', user_names_lists[0]), 
                        ('telethon2', user_names_lists[1]), ('telethon3', user_names_lists[2])]
    ]
    await asyncio.gather(*coroutines)


async def start_session_mailing(session: str, user_names: List[str], text: str, file: Optional[bytes] = None) -> None:
    async with TelegramClient(session, api_id, api_hash, proxy=(socks.SOCKS5, '37.18.73.60', 5566)) as client:
        await mailing_users(client, user_names, text, file)


async def mailing_users(client: TelegramClient, user_names: List[str], text: str, file: Optional[bytes] = None) -> None:
    print("start mailing users")
    message_count_sent = 0

    for user_name in user_names:
        if user_name is None or user_name == "None":
            continue

        # with contextlib.suppress(Exception):
        try:
            user = await client.get_entity(user_name)

            # texts = [
            #     "–ë–ï–°–ü–õ–ê–¢–ù–ê–Ø –°–¢–ê–í–ö–ê –ù–ê –§–£–¢–ë–û–õ ‚öΩÔ∏è\n\n–ó–ê–ë–†–ê–¢–¨ –¢–£–¢ üëâ https://t.me/+eK4CkR8uCyc5NDZi",
            #     "–ó–∞–∫—Ä—ã—Ç—ã–π –∫–ª—É–± —Å—Ç–æ–∏–º–æ—Å—Ç—å—é 5000‚ÇΩ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 40 —á–µ–ª–æ–≤–µ–∫ üí∞\n\n–í–°–¢–£–ü–ò–¢–¨ –ë–ï–°–ü–õ–ê–¢–ù–û ‚Äî https://t.me/+02msrMgQhaJiMWVi",
            #     "üìå –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 10.000 —Ä—É–±–ª–µ–π!\n–ò–º–µ–Ω–Ω–æ —Å—Ç–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—à –ø–ª–∞—Ç–Ω—ã–π VIP-–∫–∞–Ω–∞–ª! –ö—Ç–æ —É—Å–ø–µ–µ—Ç - –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –Ω–µ–º –Ω–∞–≤—Å–µ–≥–¥–∞!\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–∏–≥–Ω–∞–ª–æ–≤:\n1.98 ‚úÖ\n1.63 ‚úÖ\n1.49 ‚úÖ\n2.85 ‚úÖ\n1.76 ‚úÖ\n\n–ü—Ä–∏–º–µ–º –ë–ï–°–ü–õ–ê–¢–ù–û —Ç–æ–ª—å–∫–æ 30 —á–µ–ª–æ–≤–µ–∫, –¥–∞–ª—å—à–µ –≤—Ö–æ–¥ 10.000‚ÇΩ\n\n–ñ–º–∏ üëá üëá üëá\nhttps://t.me/+f_ir2f1oQ1ZlNjMy",
            #     "–°–µ–≥–æ–¥–Ω—è –≤—Ö–æ–¥ –≤ VIP-–∫–∞–Ω–∞–ª –ë–ï–°–ü–õ–ê–¢–ù–´–ô! –ö—Ç–æ —É—Å–ø–µ–µ—Ç - –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞ –≤ –Ω–µ–º!\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ 101‚úÖ 12 -\n\n–ü—Ä–∏–º–µ–º –µ—â–µ 70 —Å–≤–æ–∏—Ö –ª—é–¥–µ–πüëáüèª\n\nhttps://t.me/+T2bqvsTeR4w0MWQy",
            #     "–°–µ–≥–æ–¥–Ω—è –¥–æ—Å—Ç—É–ø –≤ VIP-–∫–∞–Ω–∞–ª –ë–ï–°–ü–õ–ê–¢–ù–´–ô! –ö—Ç–æ —É—Å–ø–µ–µ—Ç - –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –Ω–µ–º –Ω–∞–≤—Å–µ–Ω–¥–∞!\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ 87 ‚úÖ 10 ‚ùå\n\n–û—Å—Ç–∞–ª–æ—Å—å 47 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–µ—Å—Çüëáüèª\n\nhttps://t.me/+iJIAI2IxuyozNzgy"
            # ]

            # if file:
            #     with BytesIO(file) as bytes_io:
            #         await client.send_file(user, bytes_io, caption=text)
            # else:
            #     await client.send_message(user, text)

            # rand_texts = ['–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?', '–ü—Ä–∏–≤–µ—Ç, —á—Ç–æ –¥–µ–ª–∞–µ—à—å?', '–ü—Ä–∏–≤–µ—Ç, –Ω–∞–ø–∏—à–∏, –∫–∞–∫ –±—É–¥–µ—à—å —Å–≤–æ–±–æ–¥–µ–Ω', '–¢—ã —Ç—É—Ç? –û—Ç–ø–∏—à–∏—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '–•–∞–π, —Ç—ã —Ç—É—Ç?']

            async with aiohttp.ClientSession() as session:
                async with session.get(
                    'https://chestnut-bustling-allspice.glitch.me/api/v1/question', 
                    json={'text': '–ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π: –ë–ï–°–ü–õ–ê–¢–ù–ê–Ø –°–¢–ê–í–ö–ê –ù–ê –§–£–¢–ë–û–õ ‚öΩÔ∏è –ó–ê–ë–†–ê–¢–¨ –¢–£–¢ üëâ https://t.me/+eK4CkR8uCyc5NDZi'}
                ) as response:
                    text = (await response.json())['answer'].replace("\n\n", "")

            await client.send_message(user, text)
            message_count_sent += 1 if message_count_sent != 48 else 0
            
            print(f"{user_name} –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ!")
            await asyncio.sleep(random.randint(13, 60) if message_count_sent != 48 else 5 * 60)
        except ValueError as exception:
            print(exception)
        except errors.rpcerrorlist.PeerFloodError as exception:
            print(exception)

    admin = await client.get_entity('nick_test_for_bots')
    await client.send_message(admin, f"‚ö°Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞ {len(user_names)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

 
async def parse_for_channels(client: TelegramClient, channel_ids: List[int], post_count: int) -> None:
    users = set()

    for channel_id in channel_ids:
        channel = await client.get_entity(PeerChannel(int(channel_id)))

        offset_id = 0
        limit = 100 if post_count >= 100 else post_count
        final_limit = 0 if post_count >= 100 and post_count % 100 == 0 or post_count < 100 else post_count % 100
        current_post_count = post_count

        all_messages = []

        while current_post_count > 0:
            history = await client(
                GetHistoryRequest(
                    peer=channel,
                    offset_id=offset_id,
                    offset_date=None,
                    add_offset=0,
                    limit=limit if post_count >= 100 and current_post_count >= 100 else final_limit,
                    max_id=0,
                    min_id=0,
                    hash=0
                )
            )

            if not history.messages:
                break

            messages = history.messages
            all_messages.extend(messages)
            offset_id = messages[len(messages) - 1].id
            current_post_count -= limit if post_count >= 100 and current_post_count >= 100 or post_count < 100 else final_limit

        offset_id = 0
        limit = 100

        for message in all_messages:
            with contextlib.suppress(Exception):
                if message.replies is None:
                    continue

                while True:
                    messages = await client.get_messages(
                        channel,
                        offset_id=offset_id,
                        offset_date=None,
                        add_offset=0,
                        limit=limit,
                        max_id=0,
                        min_id=0,
                        reply_to=message.id
                    )

                    if not messages:
                        break

                    messages = messages

                    for comment in messages:
                        user = await client.get_entity(comment.from_id)
                        print(f"{user.id},{user.username}")
                        users.add(f"{user.id},{user.username}")
                    
                    offset_id = messages[len(messages) - 1].id

    print("parser completed")
    await create_telegram_users(users)
    print("new users saved.")


async def get_telegram_channel_info_by_link(link: str) -> tuple:
    client = TelegramClient('79851659771', api_id, api_hash)
    await client.start()
    print("start parser")

    await client(JoinChannelRequest(link))
    channel = await client.get_entity(link)
    print(channel)
    print("join channel")

    return (str(channel.id), channel.title)


@database_sync_to_async
def get_telegram_channels_by_ids(channel_ids: List[int]) -> List[int]:
    return [obj.channel_id for obj in TelegramChannel.objects.in_bulk(channel_ids).values()]


@database_sync_to_async
def get_telegram_users_by_ids(user_ids: List[int]) -> List[str]:
    print(user_ids)
    print(type(user_ids))
    if isinstance(user_ids, str) and not user_ids.startswith("["):
        return [obj.username for obj in TelegramUser.objects.in_bulk([int(user_ids)]).values()]
    return [obj.username for obj in TelegramUser.objects.in_bulk([int(uid) for uid in ast.literal_eval(user_ids)]).values()]


@database_sync_to_async
def create_telegram_users(users: List[str]) -> None:
    existing_user_ids = TelegramUser.objects.values_list('user_id', flat=True)
    new_users = [user.split(",") for user in users if user.split(",")[0] not in existing_user_ids]
    TelegramUser.objects.bulk_create([TelegramUser(user_id=user[0], username=user[1]) for user in new_users])
